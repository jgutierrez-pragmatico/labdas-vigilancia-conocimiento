{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GetEntriesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tech-radar-getEntries"
      }
    },
    "GetKcLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tech-radar-getKc"
      }
    },
    "GetChapterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tech-radar-getChapter"
      }
    },
    "GetFasesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tech-radar-getFases"
      }
    },
    "CreateEntryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tech-radar-createEntry"
      }
    },
    "GetEntryByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tech-radar-getEntryById"
      }
    },
    "UpdateEntryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/tech-radar-updateEntry"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "lambda-authorizer",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-radar-getEntries:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-radar-getKc:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-radar-getChapter:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-radar-getFases:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-radar-createEntry:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-radar-getEntryById:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-radar-updateEntry:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-radar-getEntries:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-radar-getKc:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-radar-getChapter:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-radar-getFases:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-radar-createEntry:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-radar-getEntryById:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-radar-updateEntry:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "lambda-authorizer",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GetEntriesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lambda-authorizer/dev/1689961159067-2023-07-21T17:39:19.067Z/lambda-authorizer.zip"
        },
        "Handler": "src/main/lambda/getEntries.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "tech-radar-getEntries",
        "MemorySize": 1024,
        "Timeout": 20,
        "Environment": {
          "Variables": {
            "DB_HOST": "techradar-pragma.c7e4kqes1vts.us-east-1.rds.amazonaws.com",
            "DB_PORT": "5432",
            "DB_USER": "PragmaTechRadar",
            "DB_PASSWORD": "Backstage_TechRadar+",
            "DB_NAME": "TechRadar",
            "EMAIL_URL_API": "https://s6z0b43euf.execute-api.us-east-1.amazonaws.com/dev/pragma/correo/pragma-vacaciones-correo/api/v1",
            "EMAIL_AUTH_URL": "https://ypc8axpv2c.execute-api.us-east-1.amazonaws.com",
            "EMAIL_AUTHORIZATION": "Basic Nzl0dDJrbnRic21zZzk0NnI3ampmbmI0c2I6MTJqZTVqdWg2YXFyNWtsaWg5NWtkcHRtcjluYzBxcGNvazd2NzBpMmI3a2pyazc1b2Q4cQ==",
            "EMAIL_AUTH_CLIENT_ID": "79tt2kntbsmsg946r7jjfnb4sb",
            "EMAIL_AUTH_SCOPE": "d3jvm6ee97l28q.cloudfront.net/cv"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetEntriesLogGroup"
      ]
    },
    "GetKcLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lambda-authorizer/dev/1689961159067-2023-07-21T17:39:19.067Z/lambda-authorizer.zip"
        },
        "Handler": "src/main/lambda/getKc.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "tech-radar-getKc",
        "MemorySize": 1024,
        "Timeout": 20,
        "Environment": {
          "Variables": {
            "DB_HOST": "techradar-pragma.c7e4kqes1vts.us-east-1.rds.amazonaws.com",
            "DB_PORT": "5432",
            "DB_USER": "PragmaTechRadar",
            "DB_PASSWORD": "Backstage_TechRadar+",
            "DB_NAME": "TechRadar",
            "EMAIL_URL_API": "https://s6z0b43euf.execute-api.us-east-1.amazonaws.com/dev/pragma/correo/pragma-vacaciones-correo/api/v1",
            "EMAIL_AUTH_URL": "https://ypc8axpv2c.execute-api.us-east-1.amazonaws.com",
            "EMAIL_AUTHORIZATION": "Basic Nzl0dDJrbnRic21zZzk0NnI3ampmbmI0c2I6MTJqZTVqdWg2YXFyNWtsaWg5NWtkcHRtcjluYzBxcGNvazd2NzBpMmI3a2pyazc1b2Q4cQ==",
            "EMAIL_AUTH_CLIENT_ID": "79tt2kntbsmsg946r7jjfnb4sb",
            "EMAIL_AUTH_SCOPE": "d3jvm6ee97l28q.cloudfront.net/cv"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetKcLogGroup"
      ]
    },
    "GetChapterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lambda-authorizer/dev/1689961159067-2023-07-21T17:39:19.067Z/lambda-authorizer.zip"
        },
        "Handler": "src/main/lambda/getChapter.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "tech-radar-getChapter",
        "MemorySize": 1024,
        "Timeout": 20,
        "Environment": {
          "Variables": {
            "DB_HOST": "techradar-pragma.c7e4kqes1vts.us-east-1.rds.amazonaws.com",
            "DB_PORT": "5432",
            "DB_USER": "PragmaTechRadar",
            "DB_PASSWORD": "Backstage_TechRadar+",
            "DB_NAME": "TechRadar",
            "EMAIL_URL_API": "https://s6z0b43euf.execute-api.us-east-1.amazonaws.com/dev/pragma/correo/pragma-vacaciones-correo/api/v1",
            "EMAIL_AUTH_URL": "https://ypc8axpv2c.execute-api.us-east-1.amazonaws.com",
            "EMAIL_AUTHORIZATION": "Basic Nzl0dDJrbnRic21zZzk0NnI3ampmbmI0c2I6MTJqZTVqdWg2YXFyNWtsaWg5NWtkcHRtcjluYzBxcGNvazd2NzBpMmI3a2pyazc1b2Q4cQ==",
            "EMAIL_AUTH_CLIENT_ID": "79tt2kntbsmsg946r7jjfnb4sb",
            "EMAIL_AUTH_SCOPE": "d3jvm6ee97l28q.cloudfront.net/cv"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetChapterLogGroup"
      ]
    },
    "GetFasesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lambda-authorizer/dev/1689961159067-2023-07-21T17:39:19.067Z/lambda-authorizer.zip"
        },
        "Handler": "src/main/lambda/getFases.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "tech-radar-getFases",
        "MemorySize": 1024,
        "Timeout": 20,
        "Environment": {
          "Variables": {
            "DB_HOST": "techradar-pragma.c7e4kqes1vts.us-east-1.rds.amazonaws.com",
            "DB_PORT": "5432",
            "DB_USER": "PragmaTechRadar",
            "DB_PASSWORD": "Backstage_TechRadar+",
            "DB_NAME": "TechRadar",
            "EMAIL_URL_API": "https://s6z0b43euf.execute-api.us-east-1.amazonaws.com/dev/pragma/correo/pragma-vacaciones-correo/api/v1",
            "EMAIL_AUTH_URL": "https://ypc8axpv2c.execute-api.us-east-1.amazonaws.com",
            "EMAIL_AUTHORIZATION": "Basic Nzl0dDJrbnRic21zZzk0NnI3ampmbmI0c2I6MTJqZTVqdWg2YXFyNWtsaWg5NWtkcHRtcjluYzBxcGNvazd2NzBpMmI3a2pyazc1b2Q4cQ==",
            "EMAIL_AUTH_CLIENT_ID": "79tt2kntbsmsg946r7jjfnb4sb",
            "EMAIL_AUTH_SCOPE": "d3jvm6ee97l28q.cloudfront.net/cv"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetFasesLogGroup"
      ]
    },
    "CreateEntryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lambda-authorizer/dev/1689961159067-2023-07-21T17:39:19.067Z/lambda-authorizer.zip"
        },
        "Handler": "src/main/lambda/createEntry.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "tech-radar-createEntry",
        "MemorySize": 1024,
        "Timeout": 20,
        "Environment": {
          "Variables": {
            "DB_HOST": "techradar-pragma.c7e4kqes1vts.us-east-1.rds.amazonaws.com",
            "DB_PORT": "5432",
            "DB_USER": "PragmaTechRadar",
            "DB_PASSWORD": "Backstage_TechRadar+",
            "DB_NAME": "TechRadar",
            "EMAIL_URL_API": "https://s6z0b43euf.execute-api.us-east-1.amazonaws.com/dev/pragma/correo/pragma-vacaciones-correo/api/v1",
            "EMAIL_AUTH_URL": "https://ypc8axpv2c.execute-api.us-east-1.amazonaws.com",
            "EMAIL_AUTHORIZATION": "Basic Nzl0dDJrbnRic21zZzk0NnI3ampmbmI0c2I6MTJqZTVqdWg2YXFyNWtsaWg5NWtkcHRtcjluYzBxcGNvazd2NzBpMmI3a2pyazc1b2Q4cQ==",
            "EMAIL_AUTH_CLIENT_ID": "79tt2kntbsmsg946r7jjfnb4sb",
            "EMAIL_AUTH_SCOPE": "d3jvm6ee97l28q.cloudfront.net/cv"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateEntryLogGroup"
      ]
    },
    "GetEntryByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lambda-authorizer/dev/1689961159067-2023-07-21T17:39:19.067Z/lambda-authorizer.zip"
        },
        "Handler": "src/main/lambda/getEntryById.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "tech-radar-getEntryById",
        "MemorySize": 1024,
        "Timeout": 20,
        "Environment": {
          "Variables": {
            "DB_HOST": "techradar-pragma.c7e4kqes1vts.us-east-1.rds.amazonaws.com",
            "DB_PORT": "5432",
            "DB_USER": "PragmaTechRadar",
            "DB_PASSWORD": "Backstage_TechRadar+",
            "DB_NAME": "TechRadar",
            "EMAIL_URL_API": "https://s6z0b43euf.execute-api.us-east-1.amazonaws.com/dev/pragma/correo/pragma-vacaciones-correo/api/v1",
            "EMAIL_AUTH_URL": "https://ypc8axpv2c.execute-api.us-east-1.amazonaws.com",
            "EMAIL_AUTHORIZATION": "Basic Nzl0dDJrbnRic21zZzk0NnI3ampmbmI0c2I6MTJqZTVqdWg2YXFyNWtsaWg5NWtkcHRtcjluYzBxcGNvazd2NzBpMmI3a2pyazc1b2Q4cQ==",
            "EMAIL_AUTH_CLIENT_ID": "79tt2kntbsmsg946r7jjfnb4sb",
            "EMAIL_AUTH_SCOPE": "d3jvm6ee97l28q.cloudfront.net/cv"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetEntryByIdLogGroup"
      ]
    },
    "UpdateEntryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lambda-authorizer/dev/1689961159067-2023-07-21T17:39:19.067Z/lambda-authorizer.zip"
        },
        "Handler": "src/main/lambda/updateEntry.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "tech-radar-updateEntry",
        "MemorySize": 1024,
        "Timeout": 20,
        "Environment": {
          "Variables": {
            "DB_HOST": "techradar-pragma.c7e4kqes1vts.us-east-1.rds.amazonaws.com",
            "DB_PORT": "5432",
            "DB_USER": "PragmaTechRadar",
            "DB_PASSWORD": "Backstage_TechRadar+",
            "DB_NAME": "TechRadar",
            "EMAIL_URL_API": "https://s6z0b43euf.execute-api.us-east-1.amazonaws.com/dev/pragma/correo/pragma-vacaciones-correo/api/v1",
            "EMAIL_AUTH_URL": "https://ypc8axpv2c.execute-api.us-east-1.amazonaws.com",
            "EMAIL_AUTHORIZATION": "Basic Nzl0dDJrbnRic21zZzk0NnI3ampmbmI0c2I6MTJqZTVqdWg2YXFyNWtsaWg5NWtkcHRtcjluYzBxcGNvazd2NzBpMmI3a2pyazc1b2Q4cQ==",
            "EMAIL_AUTH_CLIENT_ID": "79tt2kntbsmsg946r7jjfnb4sb",
            "EMAIL_AUTH_SCOPE": "d3jvm6ee97l28q.cloudfront.net/cv"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateEntryLogGroup"
      ]
    },
    "GetEntriesLambdaVersion5FT83Wu2JNWbk8Be1bpzn6Ohro9DZPpfVnJqEVmlA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetEntriesLambdaFunction"
        },
        "CodeSha256": "vJoW33nR40m5HBrIk4UUZFOffEfWfJEpygceJlhAt8Q="
      }
    },
    "GetKcLambdaVersiondKUqAXXbjbWZ7jY1do5ZDuV3v9gh52kjJ8vUOhN6yk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetKcLambdaFunction"
        },
        "CodeSha256": "vJoW33nR40m5HBrIk4UUZFOffEfWfJEpygceJlhAt8Q="
      }
    },
    "GetChapterLambdaVersionuVjjTrBumGOfPv1rL4U1BcbYAg7MQj16B29vO2jQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetChapterLambdaFunction"
        },
        "CodeSha256": "vJoW33nR40m5HBrIk4UUZFOffEfWfJEpygceJlhAt8Q="
      }
    },
    "GetFasesLambdaVersionYvRzdGzuVJC3kZhrVebaD7Y45epqj3Uzg8SvkPAoI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFasesLambdaFunction"
        },
        "CodeSha256": "vJoW33nR40m5HBrIk4UUZFOffEfWfJEpygceJlhAt8Q="
      }
    },
    "CreateEntryLambdaVersionYAV7hfPW2SpfMEXYo5oCl2fpu52qGCmvQYZpVusic0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateEntryLambdaFunction"
        },
        "CodeSha256": "vJoW33nR40m5HBrIk4UUZFOffEfWfJEpygceJlhAt8Q="
      }
    },
    "GetEntryByIdLambdaVersionuWVXu0cQTX6rUOSrVmU96ymaqQkN3OPNU4Slv4r1M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetEntryByIdLambdaFunction"
        },
        "CodeSha256": "vJoW33nR40m5HBrIk4UUZFOffEfWfJEpygceJlhAt8Q="
      }
    },
    "UpdateEntryLambdaVersionidr7fBU52zOknurYKfJKZKhu8Eq7F1CZT2wzxN8XY8Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateEntryLambdaFunction"
        },
        "CodeSha256": "vJoW33nR40m5HBrIk4UUZFOffEfWfJEpygceJlhAt8Q="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-lambda-authorizer",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceEntries": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "entries",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEntriesIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEntries"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceKc": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "kc",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceChapter": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "chapter",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFases": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "fases",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEntriesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEntries"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodKcOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceKc"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodChapterOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceChapter"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFasesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceFases"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEntriesIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEntriesIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEntriesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEntries"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetEntriesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetEntriesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodKcGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceKc"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetKcLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetKcLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodChapterGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceChapter"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetChapterLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetChapterLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFasesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFases"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetFasesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetFasesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEntriesPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEntries"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateEntryLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateEntryLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEntriesIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEntriesIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetEntryByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetEntryByIdLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEntriesIdVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEntriesIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateEntryLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateEntryLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1689961132127": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodEntriesOptions",
        "ApiGatewayMethodKcOptions",
        "ApiGatewayMethodChapterOptions",
        "ApiGatewayMethodFasesOptions",
        "ApiGatewayMethodEntriesIdVarOptions",
        "ApiGatewayMethodEntriesGet",
        "ApiGatewayMethodKcGet",
        "ApiGatewayMethodChapterGet",
        "ApiGatewayMethodFasesGet",
        "ApiGatewayMethodEntriesPost",
        "ApiGatewayMethodEntriesIdVarGet",
        "ApiGatewayMethodEntriesIdVarPut"
      ]
    },
    "GetEntriesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetEntriesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetKcLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetKcLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetChapterLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetChapterLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetFasesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFasesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateEntryLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateEntryLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetEntryByIdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetEntryByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateEntryLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateEntryLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-lambda-authorizer-dev-ServerlessDeploymentBucketName"
      }
    },
    "GetEntriesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetEntriesLambdaVersion5FT83Wu2JNWbk8Be1bpzn6Ohro9DZPpfVnJqEVmlA"
      },
      "Export": {
        "Name": "sls-lambda-authorizer-dev-GetEntriesLambdaFunctionQualifiedArn"
      }
    },
    "GetKcLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetKcLambdaVersiondKUqAXXbjbWZ7jY1do5ZDuV3v9gh52kjJ8vUOhN6yk"
      },
      "Export": {
        "Name": "sls-lambda-authorizer-dev-GetKcLambdaFunctionQualifiedArn"
      }
    },
    "GetChapterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetChapterLambdaVersionuVjjTrBumGOfPv1rL4U1BcbYAg7MQj16B29vO2jQ"
      },
      "Export": {
        "Name": "sls-lambda-authorizer-dev-GetChapterLambdaFunctionQualifiedArn"
      }
    },
    "GetFasesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFasesLambdaVersionYvRzdGzuVJC3kZhrVebaD7Y45epqj3Uzg8SvkPAoI"
      },
      "Export": {
        "Name": "sls-lambda-authorizer-dev-GetFasesLambdaFunctionQualifiedArn"
      }
    },
    "CreateEntryLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateEntryLambdaVersionYAV7hfPW2SpfMEXYo5oCl2fpu52qGCmvQYZpVusic0"
      },
      "Export": {
        "Name": "sls-lambda-authorizer-dev-CreateEntryLambdaFunctionQualifiedArn"
      }
    },
    "GetEntryByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetEntryByIdLambdaVersionuWVXu0cQTX6rUOSrVmU96ymaqQkN3OPNU4Slv4r1M"
      },
      "Export": {
        "Name": "sls-lambda-authorizer-dev-GetEntryByIdLambdaFunctionQualifiedArn"
      }
    },
    "UpdateEntryLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateEntryLambdaVersionidr7fBU52zOknurYKfJKZKhu8Eq7F1CZT2wzxN8XY8Y"
      },
      "Export": {
        "Name": "sls-lambda-authorizer-dev-UpdateEntryLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-lambda-authorizer-dev-ServiceEndpoint"
      }
    }
  }
}